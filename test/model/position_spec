os.loadAPI("/apis/model/position")
os.loadAPI("/apis/ccspec")
os.loadAPI("/apis/utils")

local Position = position.Position

local West = position.West
local East = position.East
local North = position.North
local South = position.South
local Unknown = position.Unknown
describe "Position.setOrientation(pos)" {

    before = function()
        pos = Position(0, 0, 0)
    end,

    ["should detect South movement"] = function()
        expect(pos.setOrientation(Position(0, 0, 1)).facing).should_be(South)
    end,

    ["should detect North movement"] = function()
        expect(pos.setOrientation(Position(0, 0, -1)).facing).should_be(North)
    end,

    ["should detect East movement"] = function()
        expect(pos.setOrientation(Position(1, 0, 0)).facing).should_be(East)
    end,

    ["should detect West movement"] = function()
        expect(pos.setOrientation(Position(-1, 0, 0)).facing).should_be(West)
    end,

    ["should ignore Up/Down movement"] = function()
        expect(pos.setOrientation(Position(0, 1, 0)).facing).should_be(Unknown)
        expect(pos.setOrientation(Position(0, -1, 0)).facing).should_be(Unknown)
    end,

}

describe "Position.necessaryTurns(pos1, pos2)" {

    before = function()
        origin = Position(0, 0, 0, North)
    end,

    ["should return zero necessary turns for no position change"] = function()
        local leftTurns, rightTurns = position.necessaryTurns(origin, Position(0, 0, 0))
        expect(leftTurns).should_be(0)
        expect(rightTurns).should_be(0)
    end,

    ["should return zero necessary turns for moving straight ahead"] = function()
        local leftTurns, rightTurns = position.necessaryTurns(origin, Position(0, 0, -1))
        expect(leftTurns).should_be(0)
        expect(rightTurns).should_be(0)
    end,

    ["should return the correct number of turns for a 180 degrees turn"] = function()
        local leftTurns, rightTurns = position.necessaryTurns(origin, Position(0, 0, 1))
        expect(leftTurns).should_be(2)
        expect(rightTurns).should_be(2)
    end,

    ["should return the correct number of turns for a right turn"] = function()
        local leftTurns, rightTurns = position.necessaryTurns(origin, Position(1, 0, 0))
        expect(leftTurns).should_be(3)
        expect(rightTurns).should_be(1)
    end,

    ["should return the correct number of turns for a left turn"] = function()
        local leftTurns, rightTurns = position.necessaryTurns(origin, Position(-1, 0, 0))
        expect(leftTurns).should_be(1)
        expect(rightTurns).should_be(3)
    end,

    ["should return nil in case the origin has no facing"] = function()
        origin.facing = Unknown
        local leftTurns, rightTurns = position.necessaryTurns(origin, Position(-1, 0, 0))
        expect(leftTurns).should_be(nil)
        expect(rightTurns).should_be(nil)
    end,

    ["should return zero for up movement"] = function()
        local leftTurns, rightTurns = position.necessaryTurns(origin, Position(0, 1, 0))
        expect(leftTurns).should_be(0)
        expect(rightTurns).should_be(0)
    end,

}


spec.report(true)
