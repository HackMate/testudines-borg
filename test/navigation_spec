os.loadAPI("/apis/navigation")
os.loadAPI("/apis/model/position")

os.loadAPI("/apis/ccspec")

describe "HomeNavigator" {

    before = function()

        homePos = position.Position(0, 12, 0, position.North)
        network = {}
        function network.getGpsLocation() return homePos end

        local fileMock = {content = nil}
        function fileMock.write(value)
            fileMock.content = value
        end
        function fileMock.readAll()
            return fileMock.content
        end
        function fileMock.close()  end
        local fsMock = {}
        function fsMock.open(file, rights)
            if fileMock.content ~= nil or string.match(rights, "w") then
                return fileMock
            else
                return nil
            end
        end

        homeNavigator = navigation.HomeNavigator(network, {}, fsMock)

        homeNavigator.setHome(homePos)
    end,

    ["setHome should fail in case no input is given"] = function()
        expect(function() homeNavigator.setHome() end).should_fail_with_message("setHome needs a valid position")
    end,

    ["setHome(pos) should work"] = function()
        homeNavigator.setHome(homePos)
        expect(homeNavigator.isHome()).should_be(true)
        expect(homeNavigator.getHomePosition()).should_be(homePos)
        expect(homeNavigator.getHomePosition().facing).should_be(position.North)
    end,

    ["saveState() - loadState() should not effect isHome()"] = function()
        homeNavigator.setHome(homePos)
        homeNavigator.saveState()
        homeNavigator.loadState()
        expect(homeNavigator.isHome()).should_be(true)
    end,

    ["loadState() should should not effect getHomePosition()"] = function()
        expect(homeNavigator.getHomePosition()).should_be(homePos)
        expect(homeNavigator.getHomePosition().facing).should_be(position.North)
    end
}

spec.report(true)