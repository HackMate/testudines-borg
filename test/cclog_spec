os.loadAPI("/apis/cclog")
os.loadAPI("/apis/ccspec")

local Logger = cclog.Logger
local Level = cclog.Level

describe "For a Logger:create('component-name', Level.WARN)" {

    before = function()
        mockLogger = {}
        function mockLogger:write(level, message, ...)
            self.level = level
            self.message = message
        end

        logger = Logger:create()
        logger:setWriter(mockLogger)
        logger.level = Level.WARN
    end,

    ["Level.INFO messages should be passed to the writer"] = function()
        logger:log(Level.WARN, "infomessage")
        expect(mockLogger.level).should_be(Level.WARN)
        expect(mockLogger.message).should_be("infomessage")
    end,

    ["Level.DEBUG messages should not be passed to the writer"] = function()
        logger:log(Level.DEBUG, "debugmessage")
        expect(mockLogger.level).should_be(nil)
        expect(mockLogger.message).should_be(nil)
    end,

    ["with logger.name='name' should add the name to the log message"] = function()
        logger.level = Level.INFO
        logger.name = "name"
        logger:info("testmessage")
        expect(mockLogger.level).should_be(Level.INFO)
        expect(mockLogger.message).should_be("name: testmessage")
    end
}

local LevelToString = cclog.LevelToString
describe "LevelToString" {
    ["should map DEBUG"] = function()
        expect(LevelToString[Level.DEBUG]).should_be("DEBUG")
    end,
    ["should map INFO"] = function()
        expect(LevelToString[Level.INFO]).should_be("INFO")
    end,
    ["should map WARN"] = function()
        expect(LevelToString[Level.WARN]).should_be("WARN")
    end,
    ["should map ERROR"] = function()
        expect(LevelToString[Level.ERROR]).should_be("ERROR")
    end,
    ["should map FATAL"] = function()
        expect(LevelToString[Level.FATAL]).should_be("FATAL")
    end,
}

describe "Logger" {
    before = function()
        mockLogger = {}
        function mockLogger:write(level, message, ...)
            self.level = level
            self.message = message
        end

        logger = Logger:create()
        logger:setWriter(mockLogger)
        logger.level = Level.DEBUG
    end,

    [":info() should return an info message"] = function()
        logger:info("infomessage")
        expect(mockLogger.level).should_be(Level.INFO)
        expect(mockLogger.message).should_be("infomessage")
    end,

    [":debug() should return an debug message"] = function()
        logger:debug("debugmessage")
        expect(mockLogger.level).should_be(Level.DEBUG)
        expect(mockLogger.message).should_be("debugmessage")
    end,

    [":warn() should return an warn message"] = function()
        logger:warn("warnmessage")
        expect(mockLogger.level).should_be(Level.WARN)
        expect(mockLogger.message).should_be("warnmessage")
    end,

    [":error() should return an error message"] = function()
        logger:error("errormessage")
        expect(mockLogger.level).should_be(Level.ERROR)
        expect(mockLogger.message).should_be("errormessage")
    end,

    [":fatal() should return an fatal message"] = function()
        logger:fatal("fatalmessage")
        expect(mockLogger.level).should_be(Level.FATAL)
        expect(mockLogger.message).should_be("fatalmessage")
    end,

}

describe "DefaultLogger" {
    ["write(.., ...) should work"] = function()
        local logger = cclog.DefaultLogger.create()
        expect(function() logger:write(Level.INFO, "test")
        end).should_succeed()
    end,
}

describe "Formatter" {
    before = function()
        formatter = cclog.Formatter.create()
    end,

    ["format(..) should add the level to the message"] = function()
        expect(formatter:format(Level.DEBUG, "debugmessage")).should_match("DEBUG: debugmessage")
        expect(formatter:format(Level.INFO, "infomessage")).should_match("INFO: infomessage")
        expect(formatter:format(Level.WARN, "warnmessage")).should_match("WARN: warnmessage")
        expect(formatter:format(Level.ERROR, "errormessage")).should_match("ERROR: errormessage")
        expect(formatter:format(Level.FATAL, "fatalmessage")).should_match("FATAL: fatalmessage")
    end,

    ["format(..) should be able to handle additional input"] = function()
        local logMessage = formatter:format(Level.INFO, "message %s %s", "first", "second")
        expect(logMessage).should_match("INFO: message first second")
    end,

}

spec.report(true)