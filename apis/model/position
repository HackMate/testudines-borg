Unknown = -1
North = 1
West = 2
South = 3
East = 4

local Facing = {
    [-1] = "Unknown",
    [1] = "North",
    [2] = "West",
    [3] = "South",
    [4] = "East",
}


local function isPosition(pos)
    return pos and pos.x and pos.y and pos.z
end

function distance(pos1, pos2)
    local arePositions = isPosition(pos1) and isPosition(pos2)
    if arePositions and pos1.isValid() and pos2.isValid() then
        local xd, yd, zd = pos1.x - pos2.x, pos1.y - pos2.y, pos1.z - pos2.z
        return math.sqrt(xd*xd + yd*yd + zd*zd)
    else
        return math.huge
    end
end

local positionMetaTable = {
    __eq = function (lhs, rhs)
        return lhs.x == rhs.x and lhs.y == rhs.y and lhs.z == rhs.z
    end,
}

function Position(x, y, z, facing)
    local self = {x = x, y = y, z = z, facing = facing or Unknown}

    setmetatable(self, positionMetaTable)

    function self.isValid()
        return self.x ~= nil and self.y ~= nil and self.z ~= nil
    end

    function self.tostring()
        if self.isValid() then
            return self.x .. ", " .. self.y .. ", " .. self.z .. ", " .. Facing[self.facing]
        else
            return "invalid-position"
        end
    end

    function self.setOrientation(nextPos)
        if isPosition(nextPos) and nextPos.isValid() then
            local xd, _, zd = self.x - nextPos.x, self.y - nextPos.y, self.z - nextPos.z
            local heading = ((xd + math.abs(xd) * 2) + (zd + math.abs(zd) * 3))
            if Facing[heading] ~= nil then
                self.facing = heading
            end
        end
        return self
    end

    return self
end



