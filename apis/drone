os.loadAPI("/apis/ccoop")
os.loadAPI("/apis/cclog")
os.loadAPI("/apis/utils")

local turtleAPI = turtle or error("Cannot access the turtle api")
local utils = utils or error("Cannot located utils api")

function setTurtleAPI(api)
    turtleAPI = api
end

local function EquipmentHandler()
    local self = {}

    function self.equipLeft() return turtleAPI.equipLeft() end
    function self.equipRight() return turtleAPI.equipRight() end

    return self
end

local function AttackHandler()
    local self = {}

    function self.attack() return turtleAPI.attack() end
    function self.attackUp() return turtleAPI.attackUp() end
    function self.attackDown() return turtleAPI.attackDown() end

    return self
end

local function InventoryHandler()
    local self = {}
    local logger = cclog.Logger("InventoryHandler")

    function self.suck(number) return turtleAPI.suck(number) end
    function self.suckUp(number) return turtleAPI.suckUp(number) end
    function self.suckDown(number) return turtleAPI.suckDown(number) end
    function self.drop(number) return turtleAPI.drop(number) end
    function self.dropUp(number) return turtleAPI.dropUp(number) end
    function self.dropDown(number) return turtleAPI.dropDown(number) end
    function self.transferTo(slot, quantity) return turtleAPI.transferTo(slot, quantity) end
    function self.getSelectedSlot() return turtleAPI.getSelectedSlot() end

    local function digAction(digFn)
        local success = digFn()
        -- If we detect something, it could be sand so we keep digging.
        if success and turtleAPI.detect() then
            os.sleep(0.2)
            return digAction(digFn)
        end
        return success
    end
    function self.dig() return digAction(turtleAPI.dig) end
    function self.digUp() return digAction(turtleAPI.digUp) end
    function self.digDown() return digAction(turtleAPI.digDown) end

    function self.place(signText) return turtleAPI.place(signText) end
    function self.placeUp() return turtleAPI.placeUp() end
    function self.placeDown() return turtleAPI.placeDown() end
    function self.select(slot) return turtleAPI.select(slot) end
    function self.getItemDetail(slot) return turtleAPI.getItemDetail(slot) end
    function self.getItemSpace(slot) return turtleAPI.getItemSpace(slot) end
    function self.getItemCount(slot) return turtleAPI.getItemCount(slot) end

    local state = { fuelInSlot = 0 }
    function self.hasFuel()
        local slot = 0
        repeat
            slot = slot+1
            local success, _ = pcall(function() self.select(slot) end)
            if success then
                local details = self.getItemDetail()
                if utils.isFuel(details) then
                    logger.info("I have fuel %s", details.name)
                    state.fuelInSlot = slot
                    return true, details.name
                end
            end
        until success == false

        return false
    end

    function self.useFuel(slot)
        if slot ~= nil then
            state.fuelInSlot = slot
        end
        if state.fuelInSlot ~= nil then
            self.select(state.fuelInSlot)
            return turtleAPI.refuel()
        else
            return false
        end
    end

    return self
end

local function InspectorHandler()
    local self = {}

    function self.inspectUp() return turtleAPI.inspectUp() end
    function self.inspectDown() return turtleAPI.inspectDown() end
    function self.inspect() return turtleAPI.inspect() end
    function self.compare() return turtleAPI.compare() end
    function self.compareUp() return turtleAPI.compareUp() end
    function self.compareDown() return turtleAPI.compareDown() end
    function self.compareTo(slotNumber) return turtleAPI.compareTo(slotNumber) end
    function self.detect() return turtleAPI.detect() end
    function self.detectUp() return turtleAPI.detectUp() end
    function self.detectDown() return turtleAPI.detectDown() end

    return self
end

local Direction = {}
Direction[position.North] = position.Position(0, 0, -1)
Direction[position.South] = position.Position(0, 0, 1)
Direction[position.East] = position.Position(1, 0, 0)
Direction[position.West] = position.Position(-1, 0, 0)

function MovementHandler(mode)
    local logger = cclog.Logger("MovementHandler")

    local self = {}
    local stateFile = ".drone-navigation"
    local state = {fuelLevel = 0, position = position.Position()}
    local lastPosition

    local function loadState()
        if mode == "persistState" then
            local success, result = utils.loadTable(stateFile)
            if success then
                state = result
                logger.info("loaded position %s", state.position.tostring())
            else
                logger.error("could not deserialize position %s", result)
            end
        end
    end

    local function saveState()
        if mode == "persistState" then
            local success, message = utils.saveTable(stateFile, state)
            if not success then
                logger.warn("Could not save state %s", message )
            end
        end
    end

    function self.turnLeft()
        if state.position.facing ~= position.Unknown then
            state.position.facing = (state.position.facing + 2) % 4 + 1
        end
        return turtleAPI.turnLeft()
    end

    function self.turnRight()
        if state.position.facing ~= position.Unknown then
            state.position.facing = state.position.facing % 4 + 1
        end
        return turtleAPI.turnRight()
    end

    function self.forward()
        if turtleAPI.forward() then
            lastPosition = state.position.clone()
            if state.position.facing ~= position.Unknown then
                state.position = state.position + Direction[state.position.facing]
            end
            return true
        else
            return false
        end
    end

    function self.back()
        if turtleAPI.back() then
            lastPosition = state.position.clone()
            if state.position.facing ~= position.Unknown then
                state.position = state.position - Direction[state.position.facing]
            end
            return true
        else
            return false
        end
    end

    function self.up()
        if turtleAPI.up() then
            lastPosition = state.position.clone()
            state.position.y = state.position.y + 1
            return true
        end
        return false
    end

    function self.down()
        if turtleAPI.down() then
            lastPosition = state.position.clone()
            state.position.y = state.position.y - 1
            return true
        end
        return false
    end

    function self.turnAround()
        self.turnLeft()
        self.turnLeft()
    end

    function self.refuel(quantity) return turtleAPI.refuel(quantity) end
    function self.getFuelLevel()
        state.fuelLevel = turtleAPI.getFuelLevel()
        return state.fuelLevel
    end
    function self.getFuelLimit() return turtleAPI.getFuelLimit() end

    function self.getPosition()
        return position.Position(state.position.x, state.position.y, state.position.z, state.position.facing)
    end

    function self.setPosition(pos)
        state.position = pos
        saveState()
    end

    function self.facingPosition()
        if state.position.facing == position.North then
            return position.Position(state.position.x, state.position.y, state.position.z - 1, state.position.facing)
        elseif state.position.facing == position.South then
            return position.Position(state.position.x, state.position.y, state.position.z + 1, state.position.facing)
        elseif state.position.facing == position.East then
            return position.Position(state.position.x + 1, state.position.y, state.position.z + 1, state.position.facing)
        elseif state.position.facing == position.West then
            return position.Position(state.position.x - 1, state.position.y, state.position.z + 1, state.position.facing)
        end
    end

    function self.getLastPosition()
        return lastPosition
    end

    if mode == "persistState" then
        loadState()
    end

    return self
end


function Drone(mode)
    local _movementHandler = MovementHandler(mode or "persistState")
    local _inspectorHandler = InspectorHandler()
    local _inventoryHandler = InventoryHandler()
    local _attackHandler = AttackHandler()
    local _equipmentHandler = EquipmentHandler()

    local self, super = extend(_movementHandler, _inspectorHandler,
        _inventoryHandler, _attackHandler, _equipmentHandler)

    local function makeAmove(move, retries)
        if retries and retries < 1 then
            return false
        end
        if move() then
            return true
        else -- Try again --
            os.sleep(0.2)
            _attackHandler.attack()
        return makeAmove(move, retries and retries-1 or 20)
        end
    end

    function self.forward() return makeAmove(super.forward) end
    function self.back() return makeAmove(super.back) end
    function self.up() return makeAmove(super.up) end
    function self.down() return makeAmove(super.down) end


    return self
end

