os.loadAPI("/apis/ccoop")
os.loadAPI("/apis/cclog")
os.loadAPI("/apis/utils")

local turtleAPI = turtle or error("Cannot access the turtle api")
local utils = utils or error("Cannot located utils api")

local function EquipmentHandler()
    local self = {}

    function self.equipLeft() return turtleAPI.equipLeft() end
    function self.equipRight() return turtleAPI.equipRight() end

    return self
end

local function AttackHandler()
    local self = {}

    function self.attack() return turtleAPI.attack() end
    function self.attackUp() return turtleAPI.attackUp() end
    function self.attackDown() return turtleAPI.attackDown() end

    return self
end

local function InventoryHandler()
    local self = {}
    local logger = cclog.Logger("InventoryHandler")

    function self.suck(number) return turtleAPI.suck(number) end
    function self.suckUp(number) return turtleAPI.suckUp(number) end
    function self.suckDown(number) return turtleAPI.suckDown(number) end
    function self.drop(number) return turtleAPI.drop(number) end
    function self.dropUp(number) return turtleAPI.dropUp(number) end
    function self.dropDown(number) return turtleAPI.dropDown(number) end
    function self.transferTo(slot, quantity) return turtleAPI.transferTo(slot, quantity) end
    function self.getSelectedSlot() return turtleAPI.getSelectedSlot() end
    function self.dig() return turtleAPI.dig() end
    function self.digUp() return turtleAPI.digUp() end
    function self.digDown() return turtleAPI.digDown() end
    function self.place(signText) return turtleAPI.place(signText) end
    function self.placeUp() return turtleAPI.placeUp() end
    function self.placeDown() return turtleAPI.placeDown() end
    function self.select(slot) return turtleAPI.select(slot) end
    function self.getItemDetail(slot) return turtleAPI.getIdemDetail(slot) end
    function self.getItemSpace(slot) return turtleAPI.getItemSpace(slot) end
    function self.getItemCount(slot) return turtleAPI.getItemCount(slot) end

    local state = { fuelInSlot = 0 }
    function self.hasFuel()
        local slot = 0
        repeat
            slot = slot+1
            local success, _ = pcall(function() self.select(slot) end)
            if success then
                local details = self.getItemDetail()
                if utils.isFuel(details) then
                    logger.info("I have fuel %s", details.name)
                    state.fuelInSlot = slot
                    return true, details.name
                end
            end
        until success == false

        return false
    end

    function self.useFuel(slot)
        if slot then
            state.fuelInSlot = slot
        end
        if state.fuelInSlot then
            self.select(state.fuelInSlot)
            return self.refuel()
        else
            return false
        end
    end

    return self
end

local function InspectorHandler()
    local self = {}

    function self.inspectUp() return turtleAPI.inspectUp() end
    function self.inspectDown() return turtleAPI.inspectDown() end
    function self.inspect() return turtleAPI.inspect() end
    function self.compare() return turtleAPI.compare() end
    function self.compareUp() return turtleAPI.compareUp() end
    function self.compareDown() return turtleAPI.compareDown() end
    function self.compareTo(slotNumber) return turtleAPI.compareTo(slotNumber) end
    function self.detect() return turtleAPI.detect() end
    function self.detectUp() return turtleAPI.detectUp() end
    function self.detectDown() return turtleAPI.detectDown() end

    return self
end

local function MovementHandler(navigator)
    local self = {}

    local navigator = navigator
    local state = {fuelLevel = 0}
    local logger = cclog.Logger("MovementHandler")

    function self.turnLeft() return turtleAPI.turnLeft() end
    function self.turnRight() return turtleAPI.turnRight() end
    function self.forward() return turtleAPI.forward() end
    function self.back() return turtleAPI.back() end
    function self.up() return turtleAPI.up() end
    function self.down() return turtleAPI.down() end
    function self.refuel(quantity) return turtleAPI.refuel(quantity) end
    function self.getFuelLevel()
        state.fuelLevel = turtleAPI.getFuelLevel()
        return state.fuelLevel
    end
    function self.getFuelLimit() return turtleAPI.getFuelLimit() end

    function self.needsFuel()
        local distanceToHome = navigator.distanceToHome()
        local fuelLevel = self.getFuelLevel()
        logger.info("I have %d fuel and have a distance to home of %s", fuelLevel, distanceToHome)
        return fuelLevel < distanceToHome * 2 or distanceToHome == 0 and fuelLevel < 100
    end

    return self
end


function Drone(navigator)
    local _movementHandler = MovementHandler(navigator)
    local _inspectorHandler = InspectorHandler()
    local _inventoryHandler = InventoryHandler()
    local _attackHandler = AttackHandler()
    local _equipmentHandler = EquipmentHandler()

    local self, super = extend(_movementHandler, _inspectorHandler,
        _inventoryHandler, _attackHandler, _equipmentHandler)

    local function makeAmove(move, retries)
        if retries and retries < 1 then
            return false
        end
        if move() then
            return true
        else -- Try again --
            os.sleep(0.2)
            _attackHandler.attack()
        return makeAmove(move, retries and retries-1 or 20)
        end
    end

    function self.forward() return makeAmove(super.forward) end
    function self.back() return makeAmove(super.back) end
    function self.up() return makeAmove(super.up) end
    function self.down() return makeAmove(super.down) end


    return self
end

