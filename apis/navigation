os.loadAPI("/apis/model/position")
os.loadAPI("/apis/utils")
os.loadAPI("/apis/cclog")

local logger = cclog.Logger:create("Navigation")

-- Interface of the required network-controller --
network = {}
function network.getGpsLocation() error("getGpsLocation must be implemented") end


local state = {
    home = {
        file = ".navigation-home",
        pos = nil
    }
}

function loadState()
    for section, _  in pairs(state) do
        local file = fs.open(state[section].file, "r")
        if file then
            local data = file.readAll()
            file.close()
            state[section] = textutils.unserialize(data)

            if section == "home" and state.home.pos then
                state.home.pos = position.Position:new(state.home.pos.x, state.home.pos.y, state.home.pos.z, state.home.pos.facing)
            end

        end
    end
end

function saveState()
    for section, _ in pairs(state) do
        local data = textutils.serialize(state[section])
        local file = fs.open(state[section].file, "w")
        if not file then
            logger:warn("Could not opens state file '" .. state[section].file .. "' for writing.")
        end
        file.write(data)
        file.close()
    end
end

function turnLeft()
    turtle.turnLeft()
end

function turnAround()
    turtle.turnRight()
    turtle.turnRight()
end

local function seesAChest()
    local success, details = turtle.inspect()
    if success then
        if string.match(string.lower(details.name), "chest") then
            logger:info("found a chest" .. details.name)
            return true, details.name
        end
    end
    return false
end

local function turnTowardsChest()
    while not seesAChest() do
        os.sleep(2)
        turnLeft()
        logger:info("I am looking for a chest")
    end
    return true
end

function findHome()
    logger:info("I need a chest to make this my home")
    turnTowardsChest()
    turnAround()

    logger:info("I like this place")
    setHome(network.getGpsLocation())
end

function setHome(pos)
    local isPosition = getmetatable(pos) == position.Position
    if isPosition and pos:isValid() then
        logger:info("Navigator: Setting home position " .. pos:tostring())
        state.home.pos = pos
        saveState()
    else
        error("Navigator: setHome needs a valid position")
    end
end

function hasHome()
    return state.home.pos ~= nil
end

function isHome()
    return state.home.pos == network.getGpsLocation()
end

function distanceToHome()
    return position.distance(network.getGpsLocation(), state.home.pos)
end

function goHome()
    if isHome() then
        return true
    else
        logger:info("Navigation: I do not know how to get home")
        return false
    end
end

function clearHome()
    state.home.pos = nil
    saveState()
    return true
end

local isNeeded = {}
isNeeded["minecraft:torch"] = 64
function needItem(detail)
    return detail and isNeeded[detail.name]
end

function takeFuelFromChest()
    local hasTakenFuel = false
    for i=1,16,1 do
        if not needItem(turtle.getItemDetail(i)) then
            turtle.select(i);turtle.drop()
            turtle.suck()
            if utils.isFuel(turtle.getItemDetail(i)) then
                hasTakenFuel = true
            end
        end
    end
    -- put everything back that are is not needed
    for i=1,16,1 do
        local details = turtle.getItemDetail(i)
        if not needItem(details) and not utils.isFuel(details) then
            turtle.select(i);turtle.drop()
        end
    end
    return hasTakenFuel
end

function getFuel()
    if isHome() and turnTowardsChest() and takeFuelFromChest() then
        logger:info("Navigation: found fuel")
        turnAround()
        return true
    else
        logger:info("Navigation: cannot get fuel")
        turnAround()
        return false
    end
end

function getPosition()
    return network.getGpsLocation()
end
function getHomePosition()
    if state.home.pos then
        return state.home.pos
    else
        return position.Position:new()
    end
end

function init(networkController)
    for field, _ in pairs(network) do
        if not networkController[field] then
            error("network must implement field: " .. field .. " of type (" .. type(network[field]) .. ")")
        end
    end

    network = networkController

    loadState()
end
