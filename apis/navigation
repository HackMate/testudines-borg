os.loadAPI("/apis/model/position")
os.loadAPI("/apis/utils")
os.loadAPI("/apis/cclog")
os.loadAPI("/apis/ccoop")

local logger = cclog.Logger("Navigation")

function HomeNavigator(network, drone, fileSystem)
    local self = {}

    local network = network
    local logger = cclog.Logger("HomeNavigator")

    local state = {
        file = ".navigation-home",
        home = {
            pos = nil
        }
    }

    function self.loadState()
        local file = fileSystem.open(state.file, "r")
        if file then
            logger.info("loading home position")
            local result = position.deserialize(file.readAll())
            file.close()
            if result.pos then
                state.home = result.pos
                logger.info("loaded home position %s", result.pos.tostring())
            else
                logger.error("could not deserialize home position %s", result)
            end
        end
    end

    function self.saveState()
        local file = fileSystem.open(state.file, "w")
        if file then
            local pos = "nil"
            if state.home.pos then
                pos = position.serialize(state.home.pos)
            end
            file.write("{pos=" .. pos .. "}")
            file.close()
        else
            logger.warn("Could not opens state file '" .. state.file .. "' for writing.")
        end
    end

    function self.turnAround()
        drone.turnRight()
        drone.turnRight()
    end

    function self.turnTowardsChest()
        while not self.seesAChest() do
            os.sleep(2)
            drone.turnLeft()
            logger.info("I am looking for a chest")
        end
        return true
    end

    function self.seesAChest()
        local success, details = drone.inspect()
        if success then
            if string.match(string.lower(details.name), "chest") then
                logger.info("found a chest" .. details.name)
                return true, details.name
            end
        end
        return false
    end

    local isNeeded = {}
    isNeeded["minecraft:torch"] = 64
    function self.needItem(detail)
        return detail and self.isNeeded[detail.name]
    end

    function self.takeFuelFromChest()
        local hasTakenFuel = false
        for i=1,16,1 do
            if not self.needItem(drone.getItemDetail(i)) then
                drone.select(i);drone.drop()
                drone.suck()
                if utils.isFuel(drone.getItemDetail(i)) then
                    hasTakenFuel = true
                end
            end
        end
        -- put everything back that are is not needed
        for i=1,16,1 do
            local details = drone.getItemDetail(i)
            if not self.needItem(details) and not utils.isFuel(details) then
                drone.select(i);drone.drop()
            end
        end
        return hasTakenFuel
    end

    function self.getFuel()
        if self.isHome() and self.turnTowardsChest() and self.takeFuelFromChest() then
            logger.info("Navigation: found fuel")
            self.turnAround()
            return true
        else
            logger.info("Navigation: cannot get fuel")
            self.turnAround()
            return false
        end
    end

    function self.findHome()
        logger.info("I need a chest to make this my home")
        self.turnTowardsChest()
        self.turnAround()

        logger.info("I like this place")
        self.setHome(network.getGpsLocation())
    end

    function self.setHome(pos)
        if pos and pos.isValid() then
            logger.info("Navigator: Setting home position " .. pos.tostring())
            state.home.pos = pos
            self.saveState()
        else
            error("setHome needs a valid position")
        end
    end

    function self.hasHome()
        return state.home.pos ~= nil
    end

    function self.distanceToHome()
        return position.distance(network.getGpsLocation(), state.home.pos)
    end

    function self.clearHome()
        state.home.pos = nil
        self.saveState()
        return true
    end

    function self.getHomePosition()
        if state.home.pos then
            return state.home.pos
        else
            return position.Position()
        end
    end

    function self.isHome()
        return state.home.pos == network.getGpsLocation()
    end

    self.loadState()

    return self
end

function Navigator(network, drone)
    local _homeNavigator = HomeNavigator(network, drone, fs)
    local self, super = extend(_homeNavigator)
    local logger = cclog.Logger("Navigation")

    function self.getPosition()
        return network.getGpsLocation()
    end

    function self.goHome()
        if self.isHome() then
            return true
        else
            logger.info("Navigation: I do not know how to get home")
            return false
        end
    end

    function self.needsFuel()
        local distanceToHome = super.distanceToHome()
        local fuelLevel = drone.getFuelLevel()
        logger.info("I have %d fuel and have a distance to home of %s", fuelLevel, distanceToHome)
        return fuelLevel < distanceToHome * 2 or distanceToHome == 0 and fuelLevel < 100
    end


    return self
end