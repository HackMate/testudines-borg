os.loadAPI("/apis/cclog")

function Task(name, action)
    if not action.execute or type(action.execute) ~= "function" then
        error("Action has no function .execute")
    end

    local self = { name = name, arguments = {}, routine = nil }


    function self.withArguments(...)
        self.arguments = {... }
        return self
    end

    function self.execute()
        return action.execute(table.unpack(self.arguments))
    end

    return self
end

function TaskQueue()
    local self = {}
    local first = 0
    local last = -1

    function self.pushleft (value)
        first = first - 1
        self[first] = value
    end

    function self.pushright (value)
        last = last + 1
        self[last] = value
    end

    function self.popleft ()
        if first > last then error("task queue is empty") end
        local value = self[first]
        self[first] = nil        -- to allow garbage collection
        first = first + 1
        return value
    end

    function self.popright ()
        if first > last then error("task queue is empty") end
        local value = self[last]
        self[last] = nil         -- to allow garbage collection
        last = last - 1
        return value
    end

    function self.isempty()
        return first == last + 1
    end

    return self
end

function SerialTaskRunner()
    local self = {currentTask = nil}

    local logger = cclog.Logger("SerialTaskRunner")

    local taskQueue = TaskQueue()
    local currentFilter
    local abortTask = false

    function self.run()
        local eventData = {}
        repeat

            if self.currentTask == nil and not taskQueue.isempty() then
                logger.info("setting current task")
                self.currentTask = taskQueue.popright()
            end

            if self.currentTask ~= nil and abortTask == true  then
                logger.info("Terminating current task")
                abortTask = false
                eventData = {"terminate"}
            end

            if self.currentTask ~= nil and (
                    currentFilter == nil or
                    currentFilter == eventData[1] or
                    eventData[1] == "terminate") then

                logger.debug("Resuming task")
                local ok, param = coroutine.resume(self.currentTask.routine, table.unpack(eventData))
                if not ok then
                    logger.info("task (%s) failed: %s ", self.currentTask.name, param)
                else
                    currentFilter = param
                end

                if coroutine.status(self.currentTask.routine) == "dead" then
                    logger.info("task (%s) ended", self.currentTask.name)
                    self.currentTask.routine = nil
                    self.currentTask = nil
                    currentFilter = nil
                end

            end

            logger.debug("yielding")
            eventData = {coroutine.yield()}
            logger.debug("resuming")

        until eventData[1] == "reboot" or eventData[1] == "terminate"

        logger.info("Going down")
    end

    function self.schedule(task)
        if type(task.execute) ~= "function" then
            error("Expected function, got" .. type(task), 3)
        end
        task.routine = coroutine.create(task.execute)
        logger.info("Scheduling task", task.name)
        taskQueue.pushleft(task)
    end

    function self.replaceCurrentTask(newTask)
        self.schedule(newTask)
        if self.currentTask then
            logger.info("Replacing task %s", self.currentTask.name)
            taskQueue.pushleft(self.currentTask)
            self.currentTask = nil
            currentFilter = nil
        end
    end

    function self.terminateCurrentTask()
        abortTask = true
    end

    return self
end
