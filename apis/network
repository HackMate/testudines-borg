
local function getModemPostion()
    for _, side in pairs(rs.getSides()) do
        if peripheral.getType(side) == "modem" then
            return side
        end
    end
    error("Rednet: Turtle does not seem to have a modem.")
end

-- Helper that wrapps error messages --
local function try(func)
    local success, message = pcall(func)
    if not success then
        error("Rednet: " .. message)
    end
end

local messageHandler = {}

function addMessageHandler(message, handler)
    messageHandler[message] = handler
end

function removeMessageHandler(message)
    messageHandler[message] = nil
end

-- returns false in case a message could not be handled --
local function handleReceivedMessage(id, message)
    if messageHandler[message] then
        local handler = messageHandler[message]
        return handler(id, message)
    end
    return true
end

local connectionEstablished = false

function openConnection()
    try(
        function()
            print("Rednet: connecting")
            rednet.open(getModemPostion())
            connectionEstablished = true
            print("Rednet: connected")
        end
    )
end

function closeConnection()
    try(
        function()
            print("Rednet: disconnecting")
            rednet.close(getModemPostion())
            connectionEstablished = false
            print("Rednet: disconnected")
        end
    )
end

function send(id, message)
    print("send " .. message)
    return rednet.send(id, message)
end

function receive(filter, timeout)
    return rednet.receive(filter, timeout)
end

function init()
    openConnection()
end

function run()
    while connectionEstablished do
        local id, message = rednet.receive()
        print("Rednet: received message '" .. message .. "' with id: " .. id)
        handleReceivedMessage(id, message)
    end
end
