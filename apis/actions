os.loadAPI("/apis/cclog")
os.loadAPI("/apis/model/position")

function ClearHomeAction(network, navigator)
    local self = {}
    local network = network
    local navigator = navigator

    function self.execute(commanderId, _)
        local success, message = navigator.clearHome()
        if success then
            network.send(commanderId, "cleared home")
        else
            network.send(commanderId, "could not clear home" .. message)
        end
    end

    return self
end

function DanceAction(network, navigator, drone)
    local self = {}
    local network = network
    local drone = drone
    local logger = cclog.Logger("DanceAction")

    function self.execute(commanderId, _)
        if navigator.needsFuel() and navigator.hasHome() then
            logger.info("need-fuel, cannot dance without some juice")
            network.send(commanderId, "need-fuel, cannot dance without some juice")
            return true
        elseif not navigator.hasHome() then
            logger.info("don't have a home")
            network.send(commanderId, "don't have a home")
            return true
        end
        logger.info("let's dance")
        network.send(commanderId, "will dance")

        while true do
            drone.forward()
            drone.forward()

            drone.up()
            drone.up()
            drone.forward()
            drone.down()
            drone.turnRight()
            drone.forward()
            drone.back()

            drone.turnLeft()
            drone.turnLeft()

            drone.forward()
            drone.back()
            drone.turnRight()
            drone.down()
            drone.back()

            drone.back()
            drone.back()
        end

        return true
    end

    return self
end

function GetDistanceToHome(network, navigator)
    local self = {}
    local network = network
    local navigator = navigator

    function self.execute(commanderId, message)
        network.send(commanderId, "distanceToHome: " .. navigator.distanceToHome())
    end

    return self
end

function FindHomeAction(network, navigator)
    local self = {}
    local network = network
    local navigator = navigator

    function self.execute(commanderId, message)
        network.send(commanderId, "will find a new home")
        navigator.findHome()
        network.send(commanderId, "has a home at " .. navigator.getHomePosition():tostring())
    end

    return self
end

function GetFuleLevelAction(network, _, drone)
    local self = {}
    local network = network
    local drone = drone

    function self.execute(commanderId, _)
        network.send(commanderId, "fuelLevel: " .. drone.getFuelLevel())
    end

    return self
end

function HasHomeAction(network, navigator)
    local self = {}
    local network = network
    local navigator = navigator

    function self.execute(commanderId, message)
        if navigator.hasHome() then
            network.send(commanderId, "has a home at " .. navigator.getHomePosition():tostring())
        else
            network.send(commanderId, "has no home")
        end
    end

    return self
end

function GetHomePositionAction(network, navigator)
    local self = {}
    local network = network
    local navigator = navigator

    function self.execute(commanderId, _)
        network.send(commanderId, "homePosition: " .. navigator.getHomePosition().tostring())
    end

    return self
end

function PingAction(network)
    local self = {}
    local network = network
    local logger = cclog.Logger("PingAction")

    function self.execute(commanderId, message)
        logger.info("sending pong")
        network.send(commanderId, "pong")
    end

    return self
end

function GetGpsPositionAction(network)
    local self = {}
    local logger = cclog.Logger("GetGpsPositionAction")

    function self.execute(commanderId, _)
        local pos = network.getGpsLocation()
        logger.info("obtained gpsLocation %s", pos.tostring())
        network.send(commanderId, "gpsPosition: " .. pos.tostring())
    end

    return self
end

function GetPositionAction(network, _, drone)
    local self = {}

    function self.execute(commanderId, _)
        network.send(commanderId, "position: " .. drone.getPosition().tostring())
    end

    return self
end


function CalibrateFacingAction(network, navigator, drone)
    local self = {}

    function self.execute(commanderId, _)
        navigator.calibrateFacing()
        network.send(commanderId, "adjusted facing: " .. drone.getPosition().tostring())
    end

    return self
end

function GoHomeAction(network, navigator, drone)
    local self = {}

    function self.execute(commanderId, message)
        local currentPos = drone.getPosition()
        if not currentPos.isValid() or currentPos.facing ~= position.Unknown then
            navigator.calibrateFacing()
        end
        network.send(commanderId, "moving from position "
                .. drone.getPosition().tostring() .. " to home: " .. navigator.getHomePosition().tostring())
        navigator.goHome()
    end

    return self
end

function RefuelAction(network, navigator, drone)
    local self = {}
    local network = network
    local navigator = navigator
    local drone = drone
    local logger = cclog.Logger("RefuelAction")

    function self.execute(commanderId, message)
        if navigator.needsFuel() then
            logger.info("I need fuel")
            if drone.hasFuel() then
                logger.info("I have fuel")
                if drone.useFuel() then
                    network.send(commanderId, "I used my fuel")
                end
            end
            if navigator.needsFuel() then
                network.send(commanderId, "I don't have fuel, going home.")
                navigator.goHome()
                if navigator.getFuel() and drone.hasFuel() then
                    drone.useFuel()
                else
                    -- Order did not finish.
                    return false
                end
            end
        else
            local message = "I do not need to refuel fuelLevel: " .. drone.getFuelLevel() ..
                    " distanceToHome: " .. navigator.distanceToHome()
            logger.info(message)
            network.send(commanderId, message)
        end
    end

    return self
end

function CollectAction(network, navigator, drone, worker)
    local self = {}

    function self.execute(commanderId, message)

        local success, item = drone.inspect()
        if success then
            network.send(commanderId, "starting to collect: " .. item.name)
            worker.collect(function(itemDetail)
                return itemDetail.name == item.name
            end)
        else
            network.send(commanderId, "nothing to collect")
        end
    end

    return self
end

function FellTreeAction(network, navigator, drone, worker)
    local self = {}

    function self.execute(commanderId, message)
            network.send(commanderId, "starting to fell tree")
            worker.collect(function(itemDetail)
                if string.match(itemDetail.name, "leav") or
                        string.match(itemDetail.name, "log") or
                        string.match(itemDetail.name, "tree") then
                    return true
                else
                    return false
                end
            end)
    end

    return self
end
